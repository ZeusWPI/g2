openapi: 3.0.0
info:
  title: Default
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /projects:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Project.v1.yaml
      operationId: get-projects
      description: Get a list with available projects.
      parameters:
        - schema:
            type: string
            enum:
              - recent
              - popular
              - alphabetical
          in: query
          description: Sort the data according to a given value. Default is alphabetical.
          name: sort
        - schema:
            type: number
          in: query
          name: limit
          description: Amount of projects to return.
    post:
      summary: ''
      operationId: post-projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Project.v1.yaml
      description: Create a new project.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
  '/projects/{id}':
    parameters:
      - schema:
          type: number
          example: 1
        name: id
        in: path
        description: ''
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Project.v1.yaml
      operationId: get-project-id
      description: Get a project by id.
    patch:
      summary: ''
      operationId: patch-project-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Project.v1.yaml
      description: Modify a project by id.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        description: |-
          Every property is optional.
          Only the given properties are updated with a new value.
    delete:
      summary: ''
      operationId: delete-project-id
      responses:
        '200':
          description: OK
      description: Delete a project by id.
  '/projects/{id}/repositories':
    parameters:
      - schema:
          type: number
          example: 1
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Repository.v1.yaml
      operationId: get-projects-id-repositories
      description: Get a list with repositories for a given project.
      parameters: []
  '/projects/{id}/issues':
    parameters:
      - schema:
          type: number
          example: 1
        name: id
        in: path
        required: true
        description: ''
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Issue.v1.yaml
      operationId: get-projects-id-issues
      description: Get a list with issues for a given project.
      parameters:
        - schema:
            type: string
            enum:
              - recent
              - popular
              - alphabetical
          in: query
          name: sort
          description: Sort the data according to a given value. Default is alphabetical.
        - schema:
            type: number
          in: query
          name: limit
          description: Amount of issues to return.
  '/projects/{id}/pulls':
    parameters:
      - schema:
          type: number
          example: 1
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Pull.v1.yaml
      operationId: get-projects-id-pulls
      description: Get a list of pull requests for a given project.
      parameters:
        - schema:
            type: string
            enum:
              - recent
              - popular
              - alphabetical
          in: query
          name: sort
          description: Sort the data according to a given value. Default is alphabetical.
        - schema:
            type: number
          in: query
          name: limit
          description: Amount of pulls to return.
  '/projects/{id}/branches':
    parameters:
      - schema:
          type: number
          example: 1
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Branch.v1.yaml
      operationId: get-projects-id-branches
      description: Get a list with branches for a given project.
      parameters:
        - schema:
            type: string
            enum:
              - recent
              - popular
              - alphabetical
          in: query
          name: sort
          description: Sort the data according to a given value. Default is alphabetical.
        - schema:
            type: number
          in: query
          name: limit
          description: Amount of branches to return.
  /repositories:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Repository.v1.yaml
      operationId: get-repositories
      description: Get a list with available repositories.
  '/repositories/{id}':
    parameters:
      - schema:
          type: number
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Repository.v1.yaml
      operationId: get-repositories-id
      description: Get a repository by id.
  '/repositories/{id}/projects/{projectId}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
      - schema:
          type: integer
        name: projectId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-repositories-id-link-projectId
      responses:
        '200':
          description: OK
      description: Link a given project id to a given repository.
    delete:
      summary: ''
      operationId: delete-repositories-id-tags-tagid
      responses:
        '200':
          description: OK
  /repositories/sync:
    post:
      summary: ''
      operationId: post-repositories-sync
      responses:
        '200':
          description: OK
      description: Sync the repositories with the git providers.
  /user:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/User.v1.yaml
        '401':
          description: Unauthorized
      operationId: get-user
      description: Get the logged in user.
  '/projects/{id}/maintainers':
    parameters:
      - schema:
          type: number
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Author.v1.yaml
      operationId: get-project-id-maintainers
      description: Get a list with maintainers for a given project.
  '/projects/{id}/contributors':
    parameters:
      - schema:
          type: number
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Author.v1.yaml
      operationId: get-projects-id-contributors
      description: Get a list with contributors for a given project.
  '/projects/{id}/features':
    parameters:
      - schema:
          type: number
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Feature.v1.yaml
      operationId: get-projects-id-featured
      description: Get a list with features for a given project.
  /tags:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Tag.v1.yaml
      operationId: get-tags
      description: Get a list with tags.
      parameters: []
    post:
      summary: ''
      operationId: post-tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Tag.v1.yaml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                color:
                  type: string
                type:
                  type: string
      description: Create a new tag.
  '/tags/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    patch:
      summary: ''
      operationId: patch-tags-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Tag.v1.yaml
              examples: {}
      description: Update a given tag by id.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                color:
                  type: string
                type:
                  type: string
        description: |-
          Every property is optional.
          Only the given properties are updated with a new value.
    get:
      summary: ''
      operationId: get-tags-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Tag.v1.yaml
      description: Get a tag by id.
    delete:
      summary: ''
      operationId: delete-tags-id
      responses:
        '200':
          description: OK
      description: Delete a given tag by id.
  '/issues/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Issue.v1.yaml
      operationId: get-issues-id
      description: Get an issue by id.
  '/issues/{id}/tags':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Tag.v1.yaml
      operationId: get-issues-id-tags
      description: Get a list with linked tags for a given issue.
  '/issues/{id}/tags/{tagId}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
      - schema:
          type: integer
        name: tagId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-issues-id-tags-tagId
      responses:
        '200':
          description: OK
      description: Link a given tag by id to a given issue.
    delete:
      summary: ''
      operationId: delete-issues-id-tags-tagId
      responses:
        '200':
          description: OK
      description: Unlink a given tag by id to a given issue.
  '/pulls/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Pull.v1.yaml
              examples: {}
      operationId: get-pulls-id
      description: Get a pull request by id.
  '/pulls/{id}/tags':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Pull.v1.yaml
      operationId: get-pulls-id-tags
      description: Get a list with linked tags for a given pull request.
  '/pulls/{id}/tags/{tagId}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
      - schema:
          type: integer
        name: tagId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-pulls-id-tags-tagId
      responses:
        '200':
          description: OK
      description: Link a given tag by id to a given pull request.
    delete:
      summary: ''
      operationId: delete-pulls-id-tags-tagId
      responses:
        '200':
          description: OK
      description: Unlink a given tag by id to a given pull request.
  '/branches/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Branch.v1.yaml
      operationId: get-branches-id
      description: Get a branch by id.
  '/branches/{id}/tags':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Tag.v1.yaml
      operationId: get-branches-id-tags
      description: Get a list with linked tags for a given branch.
  '/branches/{id}/tags/{tagId}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
      - schema:
          type: integer
        name: tagId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-branches-id-tags-tagId
      responses:
        '200':
          description: OK
      description: Link a given tag by id to a given branch.
    delete:
      summary: ''
      operationId: delete-branches-id-tags-tagId
      responses:
        '200':
          description: OK
      description: Unlink a given tag by id to a given branch.
  '/projects/{id}/tags':
    parameters:
      - schema:
          type: number
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Tag.v1.yaml
      operationId: get-projects-id-tags
      description: Get a list with linked tags for a given project.
  '/projects/{id}/tags/{tagId}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
      - schema:
          type: integer
        name: tagId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-projects-id-tags-tagId
      responses:
        '200':
          description: OK
      description: Link a given tag by id to a given project.
    delete:
      summary: ''
      operationId: delete-projects-id-tags-tagId
      responses:
        '200':
          description: OK
      description: Unlink a given tag by id to a given project.
  /search:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  issues:
                    type: array
                    items:
                      $ref: ../models/Issue.v1.yaml
                  pulls:
                    type: array
                    items:
                      $ref: ../models/Pull.v1.yaml
                  projects:
                    type: array
                    items:
                      $ref: ../models/Project.v1.yaml
                  branches:
                    type: array
                    items:
                      $ref: ../models/Branch.v1.yaml
      operationId: get-search
      description: Search for specific data using a given query.
      parameters:
        - schema:
            type: string
          in: query
          name: q
          description: |-
            Query search string.
            Filter options are seperated by a space.

            Available options are:
            - <string>: display all the items that have the given string inside their name
            - label:"<name>": display all items matching the label with given name.
            - tag:"<name>": display all items matching the tag with given name.
            - project:"<name>": display all items matching the project with given name.

            All filters are inclusive, meaning that the items that are returned must match all given filters.
        - schema:
            type: integer
          in: query
          name: limit
          description: 'Limit for each array of data. (eg: 5: only return 5 issues + 5 pulls + ...)'
        - schema:
            type: integer
          in: query
          name: page
          description: 'Page of data, based on the given limit (start: (page - 1) x limit; end: page x limit'
  '/issues/{id}/feature':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    post:
      summary: ''
      operationId: post-issues-id-feature
      responses:
        '200':
          description: OK
      description: Feature the issue with given id.
    delete:
      summary: ''
      operationId: delete-issues-id-feature
      responses:
        '200':
          description: OK
      description: Unfeature the issue with given id.
  '/pulls/{id}/feature':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    post:
      summary: ''
      operationId: post-pulls-id-feature
      responses:
        '200':
          description: OK
      description: Feature the pull request with given id.
    delete:
      summary: ''
      operationId: delete-pulls-id-feature
      responses:
        '200':
          description: OK
      description: Unfeature the pull request with given id.
  '/branches/{id}/feature':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    post:
      summary: ''
      operationId: post-branches-id-feature
      responses:
        '200':
          description: OK
      description: Feature the branch with given id.
    delete:
      summary: ''
      operationId: delete-branches-id-feature
      responses:
        '200':
          description: OK
      description: Unfeature the branch with given id.
  '/projects/{id}/feature':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    post:
      summary: ''
      operationId: post-projects-id-feature
      responses:
        '200':
          description: OK
      description: Feature the projects with given id.
    delete:
      summary: ''
      operationId: delete-projects-id-feature
      responses:
        '200':
          description: OK
      description: Unfeature the projects with given id.
  '/repositories/{id}/tags':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get tags linked to a specific repository
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Tag.v1.yaml
      operationId: get-repositories-id-tags
  '/oauth/{provider}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '307':
          description: Temporary Redirect
          headers: {}
      operationId: get-oauth-zeus
      description: |-
        OAuth endpoint for login with {provider}.
        This should redirect to the backend /oauth/callback after completion.
      parameters:
        - schema:
            type: string
          in: query
          name: frontendSuccessCallback
          description: Callback to the frontend after authentication is successful
        - schema:
            type: string
          in: query
          name: frontendErrorCallback
          description: Callback to the frontend after authentication has failed
    parameters:
      - schema:
          type: string
          enum:
            - zeus
            - github
        name: provider
        in: path
        required: true
        description: 'OAuth provider (zeus, github, ...)'
  /oauth/callback:
    get:
      summary: Your GET endpoint
      tags: []
      operationId: get-oauth-callback
      parameters:
        - schema:
            type: string
          in: query
          name: frontendSuccessCallback
          description: Callback to the frontend after authentication is successful
        - schema:
            type: string
          in: query
          name: frontendErrorCallback
          description: Callback to the frontend after authentication has failed
        - schema:
            type: string
          in: query
          name: error
          description: 'Only when failed: the error code received by the OAuth provider.'
        - schema:
            type: string
          in: query
          name: code
          description: 'Only when succeeded: the OAuth access token'
      description: |-
        Callback after OAuth completion.
        This should redirect to the correct frontend callback (provided using query params).
      responses:
        '307':
          description: Temporary Redirect
    parameters: []
  /oauth/logout:
    post:
      summary: ''
      operationId: post-oauth-logout
      responses:
        '200':
          description: OK
      description: Delete the current OAuth session
components:
  schemas: {}
